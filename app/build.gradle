apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"
    defaultConfig {
        applicationId "com.wikijourney.wikijourney"
        minSdkVersion 18
        targetSdkVersion 23
        versionCode 19
        versionName '1.1.2'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
    }
    productFlavors {
    }

    lintOptions{ // https://stackoverflow.com/a/32676398/3641865
        disable 'MissingTranslation' // So gradle stops complaining about the generated app_version string
                                     // not present in all translations. This is a (not so) ugly hack.
        abortOnError false // TODO, also find a way to avoid this
    }

    // https://stackoverflow.com/a/29525111/3641865
    applicationVariants.all { variant ->
        variant.resValue "string", "app_version", variant.versionName
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}


configurations {
    checkerFrameworkJavac {
        description = 'a customization of the Open JDK javac compiler with additional support for type annotations'
    }

    checkerFrameworkAnnotatedJDK {
        description = 'a copy of JDK classes with Checker Framework type qualifers inserted'
    }
    checkerFramework {
        description = 'The Checker Framework: custom pluggable types for Java'
    }
}

apply plugin: 'com.android.application'

// By default, don't run SPARTA. To run SPARTA, run ../gradlew compileDebugJavaWithJavac -PrunSparta=true
def runSparta = project.properties['runSparta'] ?: false

dependencies {
    // Support both options and env vars
    def spartaDir = System.env.SPARTA_CODE == null ?
            System.getProperty("SPARTA_CODE") : "$System.env.SPARTA_CODE"

    if (runSparta) {
        // checkerframework
        ext.checkerFrameworkVersion = '1.9.13'
        ext.jdkVersion = 'jdk7'
        checkerFrameworkAnnotatedJDK "org.checkerframework:${jdkVersion}:${checkerFrameworkVersion}"
        checkerFrameworkJavac "org.checkerframework:compiler:${checkerFrameworkVersion}"
        checkerFramework "org.checkerframework:checker:${checkerFrameworkVersion}"
        compile "org.checkerframework:checker:${checkerFrameworkVersion}"
        compile "org.checkerframework:checker-qual:${checkerFrameworkVersion}"
    }

    compile fileTree(dir: spartaDir, include: ['*.jar'])
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile(name: 'ACG Library-release', ext:'aar')
    compile 'com.google.android.gms:play-services-location:8.4.0' // TODO, eventually should make ACGs into modules so you don't need this

    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.android.support:design:23.2.0'
    compile 'com.android.support:recyclerview-v7:23.2.0'
    compile 'com.android.support:cardview-v7:23.2.0'
    compile 'com.android.support:support-v4:23.2.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.loopj.android:android-async-http:1.4.9'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'org.osmdroid:osmdroid-android:5.0.1@aar'
    compile 'com.github.MKergall.osmbonuspack:OSMBonusPack:v5.6'
}

if (runSparta) {
    allprojects {
        // SPARTA integration
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile).all {
                options.debug = true
                options.compilerArgs = [
                        '-processor', 'sparta.checkers.FlowChecker',
                        '-AflowPolicy=flow/flow-policy',
                        '-Astubs=stubs/osm.astub',
                        '-AprintErrorStack'
                ]
                options.bootClasspath = System.getProperty("sun.boot.class.path") + ":" + options.bootClasspath
                options.fork = true
                options.forkOptions.jvmArgs += ["-Xbootclasspath/p:${configurations.checkerFrameworkJavac.asPath}"]
            }
        }
    }
}
