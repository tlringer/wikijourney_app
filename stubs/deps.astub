package org.osmdroid.views;

class MapView extends ViewGroup implements IMapView, MapViewConstants, MultiTouchObjectCanvas<Object> {
void setBuiltInZoomControls(boolean on);
void setMultiTouchControls(boolean on);
void setTilesScaledToDpi(boolean tilesScaledToDpi);
IMapController getController();
@Sink(DISPLAY) List<@Sink(DISPLAY) Overlay> getOverlays();
}

package org.osmdroid.bonuspack.overlays;

class OverlayWithIW extends Overlay {
void getRelatedObject();
void setSubDescription(@Sink(DISPLAY) String subDescription);
}

class Marker extends OverlayWithIW {
Marker(MapView mapView);
void setPosition(@Sink(DISPLAY) GeoPoint position);
void setAnchor(@Sink(DISPLAY) float anchorU, @Sink(DISPLAY) float anchorV);
void setIcon(@Sink(DISPLAY) Drawable icon);
void setInfoWindowAnchor(@Sink(DISPLAY) float anchorU, @Sink(DISPLAY) float anchorV);
void setInfoWindow(@Sink(DISPLAY) MarkerInfoWindow infoWindow);
void setTitle(@Sink(DISPLAY) String title);
void setPosition(@Sink(DISPLAY) GeoPoint position);
void setSnippet(@Sink(DISPLAY) String snippet);
void setSubDescription(@Sink(DISPLAY) String subDescription);
void setRelatedObject(Object relatedObject);
}

class MarkerInfoWindow extends BasicInfoWindow {
MarkerInfoWindow(int layoutResId, MapView mapView);
void onOpen(@Source(USER_INPUT) Object item);
}

package org.osmdroid.util;

@PolyFlowReceiver
class GeoPoint implements IGeoPoint, MathConstants, GeoConstants, Parcelable, Serializable, Cloneable {
GeoPoint(int aLatitudeE6, int aLongitudeE6);
GeoPoint(double aLatitude, double aLongitude);
int getLongitudeE6();
int getLatitudeE6();
double getLongitude();
double getLatitude();
}

package com.loopj.android.http;

class AsyncHttpClient {
AsyncHttpClient();
RequestHandle get(Context context, @Sink(INTERNET) String url, ResponseHandlerInterface responseHandler);
void setTimeout(int value);
void setSSLSocketFactory(SSLSocketFactory sslSocketFactory);
}

class MySSLSocketFactory extends SSLSocketFactory {
MySSLSocketFactory(KeyStore truststore);
Socket createSocket(Socket arg0, String arg1, int arg2, boolean arg3) throws IOException;
static SocketFactory getDefault();
static KeyStore getKeystoreOfCA(InputStream cert);
}

class JsonHttpResponseHandler extends TextHttpResponseHandler {
JsonHttpResponseHandler();
void onSuccess(@Source(INTERNET) int statusCode, @Source(INTERNET) Header @Source(INTERNET) [] headers, @Source(INTERNET) JSONObject response);
void onFailure(@Source(INTERNET) int statusCode, @Source(INTERNET) Header @Source(INTERNET) [] headers, Throwable throwable, @Source(INTERNET) JSONObject errorResponse);
void onProgress(@Sink(WRITE_LOGS) long bytesWritten, @Sink(WRITE_LOGS) long totalSize);
void onRetry(@Sink(WRITE_LOGS) int retryNo);
}

package com.google.gson;

class Gson {
Gson();
@PolySource @PolySink <T> T fromJson(@PolySource @PolySink String json, Type typeOfT) throws JsonSyntaxException;
}

package com.google.gson.reflect;

class TypeToken<T> {
TypeToken();
Type getType();
}

package org.osmdroid.bonuspack.clustering;

class RadiusMarkerClusterer extends MarkerClusterer {
RadiusMarkerClusterer(Context ctx);
}

package org.apache.commons.lang3;

class StringUtils {
static boolean isEmpty(final CharSequence cs);
}

package com.squareup.picasso;

class Picasso {
static Picasso with(Context context);
RequestCreator load(@Sink(INTERNET) String path);
}

package org.osmdroid.bonuspack.routing;

class RoadManager {
@PolyFlow
Road getRoad(ArrayList<GeoPoint> var1);
static Polyline buildRoadOverlay(@Sink(DISPLAY) Road road, Context context);
}

@PolyFlowReceiver
class Road implements Parcelable {
@PolySourceR @PolySinkR ArrayList<RoadNode> mNodes;
String getLengthDurationText(int leg);
String getLengthDurationText(double length, double duration);
}

@PolyFlowReceiver
class RoadNode implements Parcelable {
@PolySourceR @PolySinkR GeoPoint mLocation;
@PolySourceR @PolySinkR String mInstructions;
@PolySourceR @PolySinkR double mLength;
@PolySourceR @PolySinkR double mDuration;
}
